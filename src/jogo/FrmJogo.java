/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jogo;


import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;


/**
 *
 * @author santosc
 */
public class FrmJogo extends javax.swing.JFrame implements Runnable {

        
    private boolean left;
    private boolean right;
    private boolean up;
    private boolean down;
    private boolean fimJogo;
    private boolean keyRestart;
    private boolean tiro;
    private long ultimoTiro;
    private long inimigo;
    private long ultimoInimigo;
    private int score = 0;
    private int nivel;
    private long tempoDificuldade = 0;
    private int vida;
    /**
     * Creates new form FrmJogo
     */
    public FrmJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }
                               
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 447, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_LEFT)
           left = true;
        else if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_RIGHT) 
              right = true;
        else if(evt.getKeyCode() == KeyEvent.VK_UP)
              up = true;
        else if(evt.getKeyCode() == KeyEvent.VK_DOWN)
              down = true;
        else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_R)
            keyRestart = true;
        else if (evt.getKeyCode() == KeyEvent.VK_SPACE) 
            tiro = true;
        
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_LEFT)
           left = false;
        else if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_RIGHT) 
              right = false;
        else if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_UP)
             up = false;
        else if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN)
             down = false;
        else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_R)
            keyRestart = false;
        else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            tiro = false;
        }
    }//GEN-LAST:event_formKeyReleased

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrmJogo().setVisible(true);
            }
        });
    }

    
    @Override
    public void run(){
        Graphics graph;
        
        ArrayList<Base> lista = new ArrayList();
        ArrayList<Base> lixo = new ArrayList();
        ArrayList<Base> shoot = new ArrayList();

        fimJogo = false;
        Nave player = new Nave("img/ship2.png", getWidth());
        player.setLargura(40);
        player.setAltura(35);
        player.setX(getWidth()/2);
        player.setIncY(0);
        player.setIncX(0);
        player.setY(getHeight() - player.getAltura());
        lista.add(player);
        
        nivel = 1;
        vida = 3;
        
        Random rnd = new Random();
      
        while(true){
            graph = getBufferStrategy().getDrawGraphics();
            //Limpa a tela
            graph.setColor(Color.BLACK);
            graph.fillRect(0, 0, getWidth(), getHeight());
            
             long tempo = System.currentTimeMillis();
                      
            //Colisao Nave com Enemy
            for (Base b : lista) {
                if (player.colisao(b)) {
                    lixo.add(player);
                    lixo.addAll(lista);
                    fimJogo = true;
                }
            }
           
            //ColisÃ£o Inimigo com Tiros do player
            for (Base b : shoot) {
                for(Base c : lista) {
                    if (b.colisao(c)) {
                        lixo.add(c);
                        lixo.add(b);
                        score += 50;
                    }
                }     
            }
            
            for (Base b : lista) {
                b.mover();
            }

            
            for (Base b : lista) {
                b.desenhar(graph);
            }
            
            // Inimigo na tela
            if(!fimJogo && tempo > ultimoInimigo + 1800){
                ultimoInimigo = tempo;
                Inimigo i = new Inimigo("img/enemy.png", getWidth());
                i.setIncX(0);
                i.setIncY(nivel);
                i.setX(rnd.nextInt(getWidth()));
                i.setY(50);
                lista.add(i);
            }

            // Player's shoot
            if(!fimJogo && tiro  && tempo > ultimoTiro + 800){
                ultimoTiro = tempo;
                Tiro t = new Tiro("img/bullet_red.png", getWidth());
                t.setAltura(3);
                t.setLargura(5);
                t.setY(getHeight());
                t.setIncX(0);
                t.setIncY(-5);
                t.setX(player.getX() + 10);
                t.y = player.y -3;
                lista.add(t);
                shoot.add(t);
            }
            
            
            Colisao aux = player.trataColisao(getWidth(), getHeight());
            if(aux == Colisao.DOWN){
                lixo.add(player);
                fimJogo = true;
            }
           
            for (Base b : lista) {
                aux = b.trataColisao(getWidth(), getHeight());
                if (aux == Colisao.UP || aux == Colisao.RIGHT || aux == Colisao.LEFT) {
                    lixo.add(b);
                    //lixo.add(player);
                }
                else if(aux == Colisao.DOWN ){
                    lixo.add(b);
                    vida -= 1;
                }
            }
            
            if(vida == 0){
                lixo.add(player);
                    lixo.addAll(lista);
                    fimJogo = true;
            }
                
            
            lista.removeAll(lixo);
            shoot.removeAll(lixo);
            lixo.clear();
            
            if (fimJogo) {
                graph.setColor(Color.RED);
                graph.drawString("FIM DE JOGO - Tecle ' R ' para Reiniciar", (getWidth()/2 - 100), (getHeight()/2));
               
            }
            
            graph.setColor(Color.WHITE);
            graph.drawString("Pontos: " + score , 20, (getHeight()- 20));
            
            graph.setColor(Color.WHITE);
            graph.drawString("Vida: " + vida , 20, (getHeight()- 40));
            
            
            if(!fimJogo && tempo > tempoDificuldade + 16000){
                tempoDificuldade = tempo;
                nivel += 1;
            }
            
            if (fimJogo && keyRestart) {
                player = new Nave("img/ship2.png", getWidth());
                player.setLargura(40);
                player.setAltura(35);
                player.setX(getWidth()/2);
                player.setIncY(0);
                player.setIncX(0);
                player.setY(getHeight() - player.getAltura());
                lista.add(player);
                score = 0;
                nivel = 1;
                vida = 3;
                fimJogo = false;
            }

             //movimentaÃ§Ã£o do player
            if (left) {
                player.setIncX(-5);
            }else if (right) {
                player.setIncX(5);
             }
             else if (up) {
                player.setIncY(-3);
            }
            else if (down) {
                player.setIncY(3);
            }    
            else {
                player.setIncX(0);
                player.setIncY(0);
            }
            
            graph.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(30);
            } catch (InterruptedException ex) {
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
